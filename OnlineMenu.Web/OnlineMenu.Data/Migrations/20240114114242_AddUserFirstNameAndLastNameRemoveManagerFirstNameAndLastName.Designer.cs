// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineMenu.Data;

#nullable disable

namespace OnlineMenu.Data.Migrations
{
    [DbContext(typeof(OnlineMenuDbContext))]
    [Migration("20240114114242_AddUserFirstNameAndLastNameRemoveManagerFirstNameAndLastName")]
    partial class AddUserFirstNameAndLastNameRemoveManagerFirstNameAndLastName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DrinkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Milliliters")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DrinkCategoryId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("429968ed-2dd0-447e-97f9-5277b17ca4d2"),
                            Description = "Mineral Water",
                            DrinkCategoryId = 1,
                            ImageUrl = "/img/drinks/Devin.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Milliliters = 330,
                            Name = "Devin",
                            Price = 1.80m
                        },
                        new
                        {
                            Id = new Guid("ed635bef-260f-48c3-a0e3-c2fbdf2625b7"),
                            Description = "Sparkling Water",
                            DrinkCategoryId = 1,
                            ImageUrl = "/img/drinks/DevinSparkling.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Milliliters = 330,
                            Name = "Devin",
                            Price = 2.00m
                        },
                        new
                        {
                            Id = new Guid("f38e4bb6-1b88-4174-93e1-07243d46a096"),
                            Description = "Classic or sugar free",
                            DrinkCategoryId = 2,
                            ImageUrl = "/img/drinks/cocacola.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Milliliters = 330,
                            Name = "Coca Cola",
                            Price = 2.50m
                        },
                        new
                        {
                            Id = new Guid("8a976cda-c255-4c99-835d-a0d5459c7584"),
                            Description = "Flavour by choice",
                            DrinkCategoryId = 2,
                            ImageUrl = "/img/drinks/Fanta.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Milliliters = 330,
                            Name = "Fanta",
                            Price = 2.50m
                        },
                        new
                        {
                            Id = new Guid("cfdae2fb-537c-4278-bc7a-a7653ad2cfb8"),
                            Description = "Flavour by choice",
                            DrinkCategoryId = 2,
                            ImageUrl = "/img/drinks/popsoda.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Milliliters = 330,
                            Name = "Pop Soda",
                            Price = 2.50m
                        },
                        new
                        {
                            Id = new Guid("bee246b9-b84f-4f98-bdc0-ae22dcfa2676"),
                            Description = "Espresso, Americano or Decaf",
                            DrinkCategoryId = 3,
                            ImageUrl = "/img/drinks/coffee.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "Coffee",
                            Price = 2.00m
                        },
                        new
                        {
                            Id = new Guid("b6282fac-f78d-46b0-884c-324b15f6dcb8"),
                            Description = "Cocoa powder by choice",
                            DrinkCategoryId = 3,
                            ImageUrl = "/img/drinks/Cappuccino.jpg",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Milliliters = 80,
                            Name = "Cappuccino",
                            Price = 2.60m
                        },
                        new
                        {
                            Id = new Guid("d3eebf99-fb1b-4a4b-a109-99993faffb86"),
                            Description = "Herbs or Fruit flavour",
                            DrinkCategoryId = 3,
                            ImageUrl = "/img/drinks/Tea.png",
                            IsAlcoholic = false,
                            IsDeleted = false,
                            Milliliters = 80,
                            Name = "Tea",
                            Price = 2.00m
                        },
                        new
                        {
                            Id = new Guid("4bc89cf6-6783-40d6-bf90-e33fb58ba542"),
                            Description = "Draught beer",
                            DrinkCategoryId = 4,
                            ImageUrl = "/img/drinks/BeerSmall.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 330,
                            Name = "Carlsberg",
                            Price = 3.00m
                        },
                        new
                        {
                            Id = new Guid("46fb9e42-d3da-4c23-a73a-303d7d68dcc6"),
                            Description = "Draught beer",
                            DrinkCategoryId = 4,
                            ImageUrl = "/img/drinks/Beer.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 500,
                            Name = "Carlsberg",
                            Price = 4.50m
                        },
                        new
                        {
                            Id = new Guid("89d18d77-9010-4ef1-924e-bafe9195f809"),
                            Description = "12 years aged whisky",
                            DrinkCategoryId = 5,
                            ImageUrl = "/img/drinks/Singleton.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "Singleton",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = new Guid("e134ae3f-7264-4be8-ac73-3caacd854556"),
                            Description = "15 years aged whisky",
                            DrinkCategoryId = 5,
                            ImageUrl = "/img/drinks/Glenfiddich.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "Glenfiddich",
                            Price = 18.00m
                        },
                        new
                        {
                            Id = new Guid("3019f625-adc9-400b-b10b-6592b833cc5c"),
                            Description = "Scotch whisky",
                            DrinkCategoryId = 5,
                            ImageUrl = "/img/drinks/the-sassenach.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "The Sassenach",
                            Price = 14.00m
                        },
                        new
                        {
                            Id = new Guid("71ff2b16-e3ba-4d37-bcce-cd4ecea6754c"),
                            Description = "Vodka with premium quality and smooth taste",
                            DrinkCategoryId = 6,
                            ImageUrl = "/img/drinks/Beluga.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "Beluga",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = new Guid("2227d3ed-f6ce-45a6-91af-43cb72a4d9f0"),
                            Description = "Smoothness, subtle sweetness, and clean finish",
                            DrinkCategoryId = 6,
                            ImageUrl = "/img/drinks/Belvedere.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "Belvedere",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = new Guid("9801e735-1bed-45ed-9063-ef417fd70e30"),
                            Description = "Smooth taste with subtle sweetness and a hint of almond",
                            DrinkCategoryId = 6,
                            ImageUrl = "/img/drinks/Grey-Goose.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "Grey Goose",
                            Price = 18.00m
                        },
                        new
                        {
                            Id = new Guid("93e4f05a-d9c1-419d-a812-dcc0a820ec27"),
                            Description = "London Dry Gin",
                            DrinkCategoryId = 7,
                            ImageUrl = "/img/drinks/Bombay-Sapphire.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "Bombay Sapphire",
                            Price = 8.00m
                        },
                        new
                        {
                            Id = new Guid("bc44841c-b7cf-4fbf-8340-f2a13d63b80c"),
                            Description = "London Dry Gin",
                            DrinkCategoryId = 7,
                            ImageUrl = "/img/drinks/Brokers.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 50,
                            Name = "Brokers",
                            Price = 8.00m
                        },
                        new
                        {
                            Id = new Guid("4da5a669-bace-4cfa-a5ad-150f14a7b86b"),
                            Description = "Red, White, or Rose",
                            DrinkCategoryId = 8,
                            ImageUrl = "/img/drinks/Wine.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 350,
                            Name = "Minkov Brothers",
                            Price = 6.00m
                        },
                        new
                        {
                            Id = new Guid("5c398206-1a1a-4773-a4bf-2550d6bd8d11"),
                            Description = "Consists of equal parts of three main ingredients: gin, campari, and sweet vermouth",
                            DrinkCategoryId = 9,
                            ImageUrl = "/img/drinks/negroni.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 200,
                            Name = "Negroni",
                            Price = 8.00m
                        },
                        new
                        {
                            Id = new Guid("a8f2e35f-bdfa-4327-b8dc-8f52663ee4cf"),
                            Description = "Consists of aperol, prosecco, club soda, ice cubes, orange slice",
                            DrinkCategoryId = 9,
                            ImageUrl = "/img/drinks/Aperol.Spritz.jpg",
                            IsAlcoholic = true,
                            IsDeleted = false,
                            Milliliters = 250,
                            Name = "Aperol Spritz",
                            Price = 8.00m
                        });
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.DrinkCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DrinksCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Water"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Soft Drinks"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Hot Drinks"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Beer"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Whisky"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Gin"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Wine"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Cocktails"
                        });
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.ToTable("Food");

                    b.HasData(
                        new
                        {
                            Id = new Guid("569d51cc-2649-42c9-8de5-832f2988c2c1"),
                            Description = "Romaine lettuce, croutons, parmesan cheese and a dressing consisting of olive oil, lemon juice, garlic, worcestershire sauce",
                            FoodCategoryId = 1,
                            ImageUrl = "/img/food/caesarsalad.jpg",
                            IsDeleted = false,
                            Name = "Caesar Salad",
                            Price = 12.00m,
                            Weight = 400
                        },
                        new
                        {
                            Id = new Guid("12510572-decf-4754-aec3-cac332935f36"),
                            Description = "Tomatoes, mozzarella cheese, basil leaves, olive oil, pesto",
                            FoodCategoryId = 1,
                            ImageUrl = "/img/food/capresesalad.jpg",
                            IsDeleted = false,
                            Name = "Caprese Salad",
                            Price = 12.00m,
                            Weight = 450
                        },
                        new
                        {
                            Id = new Guid("18c4b138-fc5d-4563-beac-203c7a41bbaa"),
                            Description = "With ketchup",
                            FoodCategoryId = 2,
                            ImageUrl = "/img/food/frenchfries.jpg",
                            IsDeleted = false,
                            Name = "French Fries",
                            Price = 6.50m,
                            Weight = 300
                        },
                        new
                        {
                            Id = new Guid("a8efd01e-25ef-48ab-844a-30ca627c9c44"),
                            Description = "With ketchup and yogurt sauce",
                            FoodCategoryId = 2,
                            ImageUrl = "/img/food/chickennugets.jpeg",
                            IsDeleted = false,
                            Name = "Chicken Nuggets",
                            Price = 8.00m,
                            Weight = 350
                        },
                        new
                        {
                            Id = new Guid("7c3f3ee4-bd26-4cdb-a09f-abe1056bccf8"),
                            Description = "With corn flakes and ketchup",
                            FoodCategoryId = 2,
                            ImageUrl = "/img/food/crustedchickenstrips.jpg",
                            IsDeleted = false,
                            Name = "Crusted Chicken Strips",
                            Price = 10.00m,
                            Weight = 350
                        },
                        new
                        {
                            Id = new Guid("52aa0c92-f47f-4fda-b5c7-57e37d765e96"),
                            Description = "Grilled chicken breasts topped with mozzarella cheese, tomato slices, fresh basil leaves, pesto",
                            FoodCategoryId = 3,
                            ImageUrl = "/img/food/chickencaprese.jpg",
                            IsDeleted = false,
                            Name = "Chicken Caprese",
                            Price = 11.50m,
                            Weight = 400
                        },
                        new
                        {
                            Id = new Guid("6507e18e-3bff-45d5-9f85-2bbbf7474ac6"),
                            Description = "Traditional Austrian dish made with a thinly pounded and breaded veal cutlet, french fries, yogurt sauce",
                            FoodCategoryId = 3,
                            ImageUrl = "/img/food/Vienneseschnitzel.png",
                            IsDeleted = false,
                            Name = "Viennese Schnitzel",
                            Price = 15.00m,
                            Weight = 500
                        },
                        new
                        {
                            Id = new Guid("d524c858-ed11-457d-aef0-15a298a9886b"),
                            Description = "Side dish - fresh mushrooms, mushrooms sauce, french fries, carrot and broccoli",
                            FoodCategoryId = 3,
                            ImageUrl = "/img/food/beefsteak.jpg",
                            IsDeleted = false,
                            Name = "Beef Steak",
                            Price = 29.99m,
                            Weight = 650
                        },
                        new
                        {
                            Id = new Guid("97d39561-c6f0-4ea9-96d5-63da05cda77f"),
                            Description = "Fresh buffalo mozzarella cheese, tomato sauce, basil leaves",
                            FoodCategoryId = 4,
                            ImageUrl = "/img/food/PizzaBufala.jpg",
                            IsDeleted = false,
                            Name = "Pizza Bufala",
                            Price = 14.99m,
                            Weight = 550
                        },
                        new
                        {
                            Id = new Guid("fed09852-f896-4826-958c-9f05386a9bd4"),
                            Description = "Mozzarella cheese, tomato sauce, spicy cured Italian sausage",
                            FoodCategoryId = 4,
                            ImageUrl = "/img/food/PizzaPeperoni.jpg",
                            IsDeleted = false,
                            Name = "Pizza Pepperoni",
                            Price = 14.99m,
                            Weight = 550
                        },
                        new
                        {
                            Id = new Guid("f1a06068-2030-4a58-b3ec-947e1b0d6361"),
                            Description = "Spaghetti noodles topped with a meat-based sauce ragù alla bolognese",
                            FoodCategoryId = 5,
                            ImageUrl = "/img/food/spaghettiBolognese.jpg",
                            IsDeleted = false,
                            Name = "Spaghetti Bolognese",
                            Price = 12.00m,
                            Weight = 440
                        },
                        new
                        {
                            Id = new Guid("fc711ec0-ba08-4098-9ef7-1836c1a2fdea"),
                            Description = "Spaghetti pasta, eggs, pecorino romano cheese, guanciale (cured pork cheek), black pepper",
                            FoodCategoryId = 5,
                            ImageUrl = "/img/food/SpaghettiCarbonara.jpg",
                            IsDeleted = false,
                            Name = "Spaghetti Carbonara",
                            Price = 11.00m,
                            Weight = 440
                        },
                        new
                        {
                            Id = new Guid("8e5e5542-aa8a-45d5-9dce-e0748a6a1038"),
                            Description = "Beef burger with french fries, fresh salad, cheddar",
                            FoodCategoryId = 6,
                            ImageUrl = "/img/food/BeebBurger.jpg",
                            IsDeleted = false,
                            Name = "Beef Burger",
                            Price = 18.00m,
                            Weight = 480
                        },
                        new
                        {
                            Id = new Guid("03714b16-5f0e-4437-bfd9-ff940f82da2a"),
                            Description = "Pork burger with fresh salad and cheddar",
                            FoodCategoryId = 6,
                            ImageUrl = "/img/food/porkburger.jpg",
                            IsDeleted = false,
                            Name = "Pork Burger",
                            Price = 14.00m,
                            Weight = 430
                        },
                        new
                        {
                            Id = new Guid("f0b2639a-fec0-498c-ba7d-d089ff2034e8"),
                            Description = "Chocolate souffle with vanilla ice cream",
                            FoodCategoryId = 7,
                            ImageUrl = "/img/food/Soufle.jpg",
                            IsDeleted = false,
                            Name = "Souffle",
                            Price = 6.50m,
                            Weight = 250
                        },
                        new
                        {
                            Id = new Guid("60f0844e-474d-4177-8920-4ae130498616"),
                            Description = "Consists of layers of coffee-soaked ladyfinger biscuits, a creamy mixture made with mascarpone cheese, flavored with a hint of liqueur, and dusted with cocoa powder on top",
                            FoodCategoryId = 7,
                            ImageUrl = "/img/food/tiramisu.jpg",
                            IsDeleted = false,
                            Name = "Tiramisu",
                            Price = 6.90m,
                            Weight = 300
                        },
                        new
                        {
                            Id = new Guid("f4f7754a-99af-447f-8852-b422b5203e14"),
                            Description = "Cake with intense chocolate flavor and smooth, creamy texture",
                            FoodCategoryId = 7,
                            ImageUrl = "/img/food/Garash.jpg",
                            IsDeleted = false,
                            Name = "Garash",
                            Price = 5.90m,
                            Weight = 200
                        });
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Salads"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Starters"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Main Dishes"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Spaghetti"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Desserts"
                        });
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.UserDrink", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.ToTable("UsersDrinks");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.UserFood", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("UsersFood");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OnlineMenu.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OnlineMenu.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineMenu.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OnlineMenu.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.Drink", b =>
                {
                    b.HasOne("OnlineMenu.Data.Models.DrinkCategory", "DrinkCategory")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DrinkCategory");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.Food", b =>
                {
                    b.HasOne("OnlineMenu.Data.Models.FoodCategory", "Category")
                        .WithMany("Food")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.Manager", b =>
                {
                    b.HasOne("OnlineMenu.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.UserDrink", b =>
                {
                    b.HasOne("OnlineMenu.Data.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineMenu.Data.Models.ApplicationUser", "User")
                        .WithMany("FavouriteDrinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.UserFood", b =>
                {
                    b.HasOne("OnlineMenu.Data.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineMenu.Data.Models.ApplicationUser", "User")
                        .WithMany("FavourtiteFood")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("FavouriteDrinks");

                    b.Navigation("FavourtiteFood");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.DrinkCategory", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("OnlineMenu.Data.Models.FoodCategory", b =>
                {
                    b.Navigation("Food");
                });
#pragma warning restore 612, 618
        }
    }
}
